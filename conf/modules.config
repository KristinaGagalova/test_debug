//
// Output directories setup
//

process {

    // Funannotate - Pasa -----------------------------------------------
    publishDir = [
        path: { "${params.outputdir}/processing/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: 'copy',
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: 'FUNANNOTATE_GENE_PREDICTION' {
        publishDir = [
            path: "${params.outputdir}/funannotate_predictions",
            mode: 'copy',
        ]
    }
    withName: 'FUNANNOTATEPASA_GENE_PREDICTION_CQ' {
        publishDir = [
            path: "${params.outputdir}/funannotate_predictions",
            mode: 'copy',
        ]
    }
    withName: 'FUNANNOTATE_GENE_PREDICTION_TRAINED' {
        publishDir = [
            path: "${params.outputdir}/funannotate_predictions",
            mode: 'copy',
        ]
    }
    withName: 'FUNANNOTATE_SORT' {
        publishDir = [
            path: "${params.outputdir}/funannotate_predictions/genome_clean",
            mode: 'copy',
        ]
    }
    withName: 'CQ_PATHOGENMODE' {
        publishDir = [
            path: "${params.outputdir}/cqpm",
            mode: 'copy',
        ]
    }
    withName: 'FUNANNOTATE_ANNOTATE' {
        publishDir = [
            path: "${params.outputdir}/funannotate_annotate",
            mode: 'copy',
        ]
    }
    withName: 'PASA_ASMBLSTOTRAINING' {
	publishDir = [
	     path: "${params.outputdir}/pasa_predictions/",
	     mode: 'copy',
       ]
    }
    withName: 'DICT_REF' {
        ext.args = ' '  // Optional
        ext.prefix = { "${meta.id}_reference" }  // Optional: custom prefix
        ext.when = { params.create_dict }  // Optional: conditional execution
    }
    withName: 'MARK_ILLUMINA_ADAPTERS' {
        ext.args1 = ' ' 
        ext.args2 = ' '
        ext.clipping_attribute = 'XT'
        ext.clipping_action = '2'
        ext.interleave = true
        ext.non_pf = true
        ext.tmp_dir = '/tmp'
        ext.prefix = { "${meta.id}_marked" }
    }
    //--------------------------------------------------------------------
    // Standard BWA_MAPREADS configuration
    withName: 'BWA_MAPREADS' {
        label = 'small_task'
        ext.args = ''  // Standard paired-end alignment
        ext.threads = 4
    }
    // Special configuration for ALIGN_TO_REF_UBAM use case
    withName: 'ALIGN_TO_REF_UBAM' {
        label = 'medium_task'  // Override to medium task
        ext.args = '-M -p'     // Mark shorter hits (-M) and interleaved input (-p)
        ext.threads = 8        // More threads for this use case
        //ext.sort_args = '-m 4G' // More memory for sorting
    }
    withName: 'SORT_AND_INDEX_BAM' {
        //ext.sort_args = '-m 4G'           // Memory per thread for sorting
        ext.index_args = ''               // Additional index arguments
        ext.threads = 8                   // Override thread count
        ext.ref_suffix = '_vs_reference'  // Custom reference suffix
        ext.prefix = { "${meta.id}_sorted" } // Custom prefix
    }
    withName: 'MARK_DUPLICATES' {
        ext.args = ' '     // Additional GATK arguments
        ext.tmp_dir = '/tmp'                      // Custom temp directory
        //ext.validation_stringency = 'LENIENT'     // More lenient validation
        ext.assume_sort_order = 'coordinate'      // Assume coordinate sorting
        ext.create_index = true                   // Create BAM index
        ext.prefix = { "${meta.id}_dedup" }       // Custom prefix
    }
    withName: 'MERGE_BAM_WITH_UBAM' {
        ext.args1 = ''  // MergeBamAlignment args
        ext.args2 = ''                                      // BuildBamIndex args
        ext.tmp_dir = '/tmp'                                // Custom temp directory
        ext.sort_order = 'coordinate'                       // Sort order
        ext.clip_adapters = true                            // Clip adapters
        ext.prefix = { "${meta.id}_merged" }                // Custom prefix
    }
    withName: 'COMBINE_AND_GENOTYPE_VCF' {
        ext.tmp_dir = '/tmp'                      // Custom temp directory
    }
    withName: 'FILTER_SNPS_AND_INDELS' {
        ext.args1 = ''       // SNP-specific filters
        ext.args2 = ''       // INDEL-specific filters
        ext.tmp_dir = '/tmp' // Custom temp directory
    }
    withName: 'QUALITY_FILTER_VARIANTS' {
        // SNP filter thresholds
        ext.snp_qd = "2.0"
        ext.snp_qual = "30.0"
        ext.snp_sor = "3.0"
        ext.snp_fs = "60.0"
        ext.snp_mq = "40.0"
        ext.snp_mqranksum = "-12.5"
        ext.snp_readposranksum = "-8.0"
        // INDEL filter thresholds
        ext.indel_qd = "2.0"
        ext.indel_qual = "30.0"
        ext.indel_fs = "200.0"
        ext.indel_readposranksum = "-20.0"
        // Additional options
        ext.tmp_dir = '/tmp'
        //ext.args1 = '--cluster-size 3 --cluster-window-size 35'  // SNP clustering
        //ext.args2 = '--cluster-size 3 --cluster-window-size 35'  // INDEL clustering
    }
    withName: 'FINAL_FILTER_VARIANTS' {
        ext.missing_data = "0.3"           // 30% missing data threshold
        ext.max_alleles = "2"              // Biallelic only
        ext.ld_threshold = "0.8"           // LD pruning threshold
        ext.window_size = "10000bp"        // Larger pruning window
        ext.output_format = "z"            // Compressed VCF output
        ext.args1 = ' '           // 
        ext.args2 = ' '     // 
    }
     withName: 'VCF_TO_PHYLIP' {
        publishDir = [
	     path: "${params.outputdir}/snp_phylo/vcf_to_phylyp/",
	     mode: 'copy',
       ]
        ext.prefix = { "${meta.id}_alignment" }  // Custom prefix
        ext.args = ' '       // Additional script args
    }
    withName: 'GENERATE_TREE' {
        ext.model = "TEST"             // Specific substitution model
        ext.bootstrap = "1000"           // Bootstrap replicates
        ext.alrt = "1000"               // SH-aLRT replicates
        ext.sequence_type = "DNA"        // Sequence type
        ext.outgroup = "sample1,sample2" // Outgroup samples
        ext.memory = "4G"               // Memory limit
        ext.threads = 8                 // Override thread count
        ext.prefix = { "${meta.id}_tree" } // Custom prefix
        ext.args = "-czb -redo"         // Additional IQ-TREE options
    }
}