manifest {
  name = 'MycoProcessor'
  description = 'The CCDM software library for fungal genome assembly, annotation and discovery of pathogenicity-relevent genes of interest'
  homePage = ''
  author = 'Bioinformatics team at CCDM: James K. Hane, Mohitul Hossain, Naomi Gray, Shota Morikawa, Johannes Debler, Pavel Misiun, Kristina K. Gagalova'
  mainScript = 'main.nf'
  nextflowVersion = '>=22.03'
  version = "v0.0.1"
}

plugins {
  id 'nf-validation'
}

params {

    // Conda
    enable_conda               = true

    //Input parameters list
    help                       = null
    tool                       = null
    
    // Input options
    genomes                    = null
    inputdir                   = "input"
    outputdir                  = "results"
    transcripts                = null
    min_contig_size            = 1000

    // PASA parameters
    config_pasa                = "${baseDir}/assets/pasa/alignAssembly.config"
    config_pasa_dir            = "${baseDir}/assets/pasa/pasa_config/"
    pasa_nmodels               = 1000
    max_intron_size            = 20000
    min_prot_length            = 35

    // funannotate parameters
    //funannotate_db             = null // if not provided, will run the setup
    gmark_db                   = null
    augustus_config            = null
    evm_home                   = null
    proteins                   = null // if none provided by user it will use Uniprot
    transcripts                = null // assembled transcripts or cDNA library
    buscoseed                  = 'anidulans' //Augustus pre-trained species to start BUSCO. Default: anidulans
    species                    = "Ascomycota"
    buscodb                    = 'fungi'
    organism                   = 'fungus'
    ploidy                     = 1
    rnareads                   = null // aligned RNAseq reads
    header_length              = 150    

    // cqpm parameters
    cqpm                      = false
    signalp_path              = null

    // snps phylo parameters
    fastq                     = null
    outdir                    = null
    refname                   = null
    ref                       = null

    // orthology clustering parameters
    cds                       = null
    prot                      = null
    pangene_cds               = null
    pangene_prot              = null
    cull_groups	              = 0

    // assembly params
    in_table                  = null
    kraken_db                 = null
    bin                       = null

    // Flye
    read_error                 = "0.03"
    genome_size                = "42m"
    asm_coverage               = "50"

    // Long-read mitotagging
    mito_db                    = "'https://ftp.ncbi.nlm.nih.gov/refseq/release/mitochondrion/'"

    // snp-phylo params
    fastq                     = null
    refname                   = "Mycoprocessor"
    ref                       = null
    missingdata               = 0.001
}

params.custom_config_base = "."
includeConfig("${params.custom_config_base}/conf/containers.config")
includeConfig("${params.custom_config_base}/nfcore_custom.config")
includeConfig("${params.custom_config_base}/conf/modules.config")
//not working - TODO fix
includeConfig("${params.custom_config_base}/conf/containers.config")

profiles {
  pawsey_setonix {
    includeConfig "${params.custom_config_base}/conf/profiles/pawsey_setonix.config"
  }
}


conda.enabled = true

process {
    // ALL PROCESSES
    cache        = true
    scratch      = false
    stageInMode  = 'symlink'
    stageOutMode = 'rsync'

    // DEFAULT RESOURCES
    max_cpus         = 8
    memory           = '4.GB'
    max_memory       = '8.GB'
    
    // SPECIFIC RESOURCES
    withLabel: 'small_task' {
	cpus = { check_max( 8 * task.attempt, 'cpus' ) }
        memory = { check_max( 8.GB * task.attempt, 'memory' ) }
        time = { check_max( 1.h * task.attempt, 'time' ) }
    }

    withLabel: 'medium_task' {
	cpus = { check_max( 24 * task.attempt, 'cpus' ) }
        memory = { check_max( 24.GB * task.attempt, 'memory' ) }
        time = { check_max( 2.h * task.attempt, 'time' ) }
    }

    withLabel: 'mediumHighMem_task' {
        cpus = { check_max( 24 * task.attempt, 'cpus' ) }
        memory = { check_max( 100.GB * task.attempt, 'memory' ) }
        time = { check_max( 24.h * task.attempt, 'time' ) }
    }

    withLabel: 'large_task' {
	cpus = { check_max( 32 * task.attempt, 'cpus' ) }
        memory = { check_max( 200.GB * task.attempt, 'memory' ) }
        time = { check_max( 24.h * task.attempt, 'time' ) }
    }

    withLabel: 'largeHighMem_task' {
	cpus = { check_max( 32 * task.attempt, 'cpus' ) }
        memory = { check_max( 400.GB * task.attempt, 'memory' ) }
        time = { check_max( 24.h * task.attempt, 'time' ) }
    }

    withLabel: big_task_highmem {
    	cpus = 24
    	memory = 400.GB
    	time = "24h"
    }
      
    withLabel: 'very_large_task' {
	cpus = { check_max( 64 * task.attempt, 'cpus' ) }
        memory = { check_max( 200.GB * task.attempt, 'memory' ) }
        time = { check_max( 24.h * task.attempt, 'time' ) }
    }

}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
